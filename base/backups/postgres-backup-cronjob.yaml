apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: 5stack
spec:
  schedule: "0 3 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: backup
              image: postgres:17-alpine
              command:
                - /bin/sh
                - -c
                - |
                  set -euo pipefail
                  
                  apk add --no-cache zip curl ca-certificates bash aws-cli || true

                  TS=$(date -u +"%Y%m%d%H%M%S")
                  DUMP_FILE="/tmp/backup-$TS.dump"
                  ZIP_FILE="/tmp/backup-$TS.zip"

                  export PGPASSWORD="$POSTGRES_PASSWORD"

                  pg_dump -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -F c -Z 0 --no-owner --no-privileges -f "$DUMP_FILE"
                  
                  zip -j "$ZIP_FILE" "$DUMP_FILE"

                  ENDPOINT="${S3_ENDPOINT:-minio}"

                  if [ "$ENDPOINT" = "minio" ]; then
                    ENDPOINT="http://minio:9000"
                  else
                    ENDPOINT="https://$S3_ENDPOINT"
                  fi

                  export AWS_ACCESS_KEY_ID="$S3_ACCESS_KEY"
                  export AWS_SECRET_ACCESS_KEY="$S3_SECRET"
                  export AWS_DEFAULT_REGION="${S3_REGION:-us-east-1}"

                  S3_DB_BACKUP_BUCKET="${S3_DB_BACKUP_BUCKET:-5stack-db-backups}"

                  echo "Uploading to $ENDPOINT : $S3_DB_BACKUP_BUCKET/backup-$TS.zip"

                  aws s3 cp "$ZIP_FILE" "s3://$S3_DB_BACKUP_BUCKET/backup-$TS.zip" --endpoint-url "$ENDPOINT"

                  echo "Backup complete: $ZIP_FILE"

                  KEYS=$(aws s3api list-objects-v2 \
                    --bucket "$S3_DB_BACKUP_BUCKET" \
                    --query 'reverse(sort_by(Contents, &LastModified))[].Key' \
                    --output text \
                    --endpoint-url "$ENDPOINT" || true)

                  DELETEABLE_KEYS=$(echo "$KEYS" | tr '\t' '\n' | awk 'NR>7')

                  if [ -n "$DELETEABLE_KEYS" ]; then
                    echo "Pruning old backups, keeping latest 7"
                    echo "$DELETEABLE_KEYS" | while IFS= read -r KEY; do
                      echo "Deleting old backup: $KEY"
                      aws s3 rm "s3://$S3_DB_BACKUP_BUCKET/$KEY" --endpoint-url "$ENDPOINT" || true
                    done
                    echo "Pruning complete"
                  fi
              envFrom:
                - secretRef:
                    name: timescaledb-secrets
                - secretRef:
                    name: s3-secrets
                - configMapRef:
                    name: s3-config
              env:
                - name: POSTGRES_HOST
                  value: timescaledb
                - name: POSTGRES_PORT
                  value: "5432"
                - name: POSTGRES_DB
                  value: hasura
                - name: POSTGRES_USER
                  value: hasura
